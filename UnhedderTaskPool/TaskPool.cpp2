
#include "..\include\TaskPool.h"

#define Throw(exc) throw exc

using namespace AsyncTask;
using namespace std;

thread_local shared_ptr<TaskPoolImpl> _owner_pool = nullptr;
thread_local vector<shared_ptr<PoolLink>> _pool_links{};

AsyncTask: namespace = {

	PoolLink: type = {
		_pool: shared_ptr<TaskPoolImpl>;
		_rootPool: shared_ptr<TaskPool>;

		operator=: (out this, pool: shared_ptr<TaskPoolImpl>, rootPool: shared_ptr<TaskPool>) = {
			_pool = pool;
			_rootPool = rootPool;
		}
		
		Unlink: (inout this) = {
			_pool = nullptr;
			_rootPool = nullptr;
		}
		GetPool: (this) -> shared_ptr<TaskPoolImpl> = _pool;
		GetRootPool: (this) -> shared_ptr<TaskPool> = _rootPool;

		TryGet: () -> shared_ptr<PoolLink> = {
			while _pool_links.size() > 0 as size_t {
				link:= _pool_links.back();
				if link*.GetPool() {
					return link;
				}
				_pool_links.pop_back();
			}
			return nullptr;
		}
		Get: () -> shared_ptr<PoolLink> = {
			link:= TryGet();
			if link {
				return link;
			}
			Throw(runtime_error("thread has no linked pool"));
		}
	}

	TaskPoolImpl: type = {
		_shutdown: bool = false;

		_lock: mutex = ();
		_pending_actions: vector<function<void()>> = ();
		_threads: vector<jthread> = ();
		_waiting: vector<*binary_semaphore> = ();

		QueueAction: (inout this, action: function<void()>) = {
			_: lock_guard<mutex> = _lock;
			if _shutdown {
				return;
			}

			_pending_actions.push_back(action);
			if _waiting.size() == 0 as size_t {
				return;
			}
			_waiting.front()*.release();
			_waiting.erase(_waiting.begin());
		}

		Quit: (inout this) = {
			_shutdown = true;
			{
				_: lock_guard<mutex> = _lock;
				for _waiting do(s) {
					s*.release();
				}
				_waiting.clear();
				_pending_actions.clear();
			}
			_threads.clear(); //_threads will not be accessed after shutdown and a finished mutex lock
		}

		private NextAction: (inout this) -> optional<function<void()>> = {
			_: lock_guard<mutex> = _lock;
			if _pending_actions.size() == 0 as size_t {
				return ();
			}
			result:= _pending_actions[0];
			_pending_actions.erase(_pending_actions.begin());
			return result;
		}

		WorkerEntry: (inout this) = {
			while !_shutdown {
				next:= NextAction();
				if next {
					next.value()();
				}
				else {
					waiting: binary_semaphore = 0;
					{
						_: lock_guard<mutex> = _lock;
						if _shutdown {
							return;
						}
						_waiting.push_back(waiting&);
					}
					waiting.acquire();
				}
			}
		}

		MoveThread: (inout this, move thread: jthread) = {
			_: lock_guard<mutex> = _lock;
			if !_shutdown {
				_threads.push_back(thread);
			}
		}

		Local: () -> shared_ptr<TaskPoolImpl> = {
			if _owner_pool {
				return _owner_pool;
			}
			return PoolLink::Get()*.GetPool();
		}
	}

}

TaskPool::TaskPool(int workerThreads) {
	if(workerThreads <= 0)	
		throw invalid_argument("workerThreads must be at least 1");

	auto impl = _impl = make_shared<TaskPoolImpl>();

	for(int i = 0; i < workerThreads; i++) {
		jthread worker([impl]() {
			auto implCopy = _owner_pool = impl;
			implCopy->WorkerEntry();
			});
		_impl->MoveThread(move(worker));
	}
}

TaskPool::~TaskPool() {
	_impl->Quit();
}

bool TaskPool::QueuePoolTask::await_ready() { return false; }
void TaskPool::QueuePoolTask::await_suspend(coroutine_handle<> h) {
	auto pool_impl = TaskPoolImpl::Local();
	pool_impl->QueueAction([h]() {h.resume(); });
}
void TaskPool::QueuePoolTask::await_resume() {}

TaskPool::AwaitableTask::task_data::task_data() {
	_pool_impl = TaskPoolImpl::Local();
}

TaskPool::AwaitableTask::task_data::~task_data() {
	if(!IsDone())
	{
		try {
			throw UnfinishedTaskException();
		}
		catch (...) {
			SetException(std::current_exception());
		}
	}
}

bool TaskPool::AwaitableTask::task_data::IsDone() {
	return _done;
}

void TaskPool::AwaitableTask::task_data::SetDone() {
	_done = true;
	{
		const lock_guard<mutex> lock(_lock);
		for (auto& h : _handles)
			_pool_impl->QueueAction([h]() {h.resume(); });
		_handles.clear();
	}
}

void TaskPool::AwaitableTask::task_data::SetException(exception_ptr exc) {
	if(exc) {
		_exc = exc;
		SetDone();
	}
}

void TaskPool::AwaitableTask::task_data::Rethrow() {
	auto exc = _exc;
	if(exc)
		rethrow_exception(exc);
}


void TaskPool::AwaitableTask::task_data::AddSuspend(coroutine_handle<> h) {
	if (!_done) {
		const lock_guard<mutex> lock(_lock);
		if (!_done) {
			_handles.push_back(h);
			return;
		}
	}
	h.resume();
}

bool TaskPool::AwaitableTask::await_ready() {
	if(_data->IsDone()) {
		_data->Rethrow();
		return true;
	}
	return false;
}

void TaskPool::AwaitableTask::await_suspend(coroutine_handle<> h) {
	_data->AddSuspend(h);
}

void TaskPool::TemplateTask<void>::await_resume() {
	_data->Rethrow();
}

void TaskPool::TemplateTask<void>::Join() {
	if(_owner_pool)
		throw runtime_error("cannot join inside a thread owned by a task pool");

	binary_semaphore awaiter{0};
	exception_ptr exc{};

	[&awaiter, &exc, this]() -> TaskPool::TemplateTask<void>{
		auto& scopeAwaiter = awaiter;
		auto& scopeExc = exc;
		try {
			co_await *this;
		}
		catch(...) {
			scopeExc = std::current_exception();
		}
		scopeAwaiter.release();
	}();

	awaiter.acquire();
	if(exc)
		rethrow_exception(exc);
}

TaskPool::TemplateTask<void> TaskPool::TemplateTask<void>::Run(function<void()> action) {
	auto pool = TaskPoolImpl::Local();
	TemplateTask<void>::promise_type promise{};
	auto task = promise.get_return_object();
	pool->QueueAction([promise, action]() {
			auto promiseCopy = promise;
			try {
				action();
			}
			catch(...) {
				promiseCopy.unhandled_exception();
			}
			promiseCopy.return_void();
		});
	return move(task);
}

TaskPool::TemplateTask<void> TaskPool::TemplateTask<void>::CompletedTask() {
	TemplateTask<void>::promise_type promise{};
	auto task = promise.get_return_object();
	promise.return_void();
	return move(task);
}

TaskPool::TemplateTask<void> TaskPool::TemplateTask<void>::Delay(chrono::milliseconds ms) {
	auto desiredEnd = chrono::system_clock::now() + ms;
	TemplateTask<void>::promise_type promise{};
	auto task = promise.get_return_object();
	thread([promise, desiredEnd]() {
			auto promiseCopy = promise;
			auto toWait = chrono::duration_cast<chrono::milliseconds>(desiredEnd - chrono::system_clock::now());
			if(toWait > 0ms)
				this_thread::sleep_for(toWait);
			promiseCopy.return_void();
		}).detach();
	return move(task);
}

TaskPool::QueuePoolTask TaskPool::TemplateTask<void>::ContinueInPool() { return TaskPool::QueuePoolTask(); }

TaskPool::ThreadLinkedPool::ThreadLinkedPool(ThreadLinkedPool&& that) {
	_unlink = exchange(that._unlink, [](){});
}

TaskPool::ThreadLinkedPool& TaskPool::ThreadLinkedPool::operator=(ThreadLinkedPool&& that) {
	exchange(_unlink, exchange(that._unlink, [](){}))();
	return *this;
}

TaskPool::ThreadLinkedPool::ThreadLinkedPool(shared_ptr<TaskPool> pool) {
	if(!pool)
		throw invalid_argument("pool is nullptr");
	
	if(_owner_pool)
		throw runtime_error("thread is owned by a task pool");

	auto link = make_shared<PoolLink>(pool->_impl, pool);

	_pool_links.push_back(link);

	_unlink = [link](){link->Unlink();};
}

TaskPool::ThreadLinkedPool::~ThreadLinkedPool() {
	_unlink();
}

function<void()> TaskPool::ThreadLinkedPool::LinkedThreadAction(function<void()> action) {
	auto pool = PoolLink::Get()->GetRootPool();
	return [pool, action](){
		const ThreadLink link(pool);
		action();
	};
}
