#include "Framework.h"

ExpectingTimer: type = {

	_expected: chrono::milliseconds;
	_epsilon: chrono::milliseconds;

	_start: chrono::system_clock::time_point;

	operator=: (out this, expected: chrono::milliseconds, epsilon: chrono::milliseconds) = {
		_expected = expected;
		_epsilon = epsilon;
		_start = chrono::system_clock::now();
	}
	operator=: (move this) = {
		delta:= chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now() - _start);
		deviation:= delta - _expected;
		EXPECT_TRUE((-_epsilon <= deviation <= _epsilon));
	}

}

DelayJoin: () = {
	TESTPOOL(2);

	task: Task<void>;

	{
		_:ExpectingTimer = (0ms, 5ms);
		task = Task<void>::Delay(100ms);
	}

	_:ExpectingTimer = (100ms, 20ms);
	task.Join();
}
TEST(DelayTests, DelayJoin)

AwaitDelay: () = {
	TESTPOOL(2);

	task: Task<void>;

	{
		_:ExpectingTimer = (0ms, 5ms);
		task = :() -> Task<void> = {
			AWAIT(Task<void>::Delay(100ms));
		}();
	}

	_:ExpectingTimer = (100ms, 20ms);
	task.Join();
}
TEST(DelayTests, AwaitDelay)

AfterAnother: () = {
	TESTPOOL(2);

	task: Task<void>;

	{
		_:ExpectingTimer = (0ms, 5ms);
		task = :() -> Task<void> = {
			AWAIT(Task<void>::Delay(100ms));
			AWAIT(Task<void>::Delay(200ms));
		}();
	}

	_:ExpectingTimer = (300ms, 20ms);
	task.Join();
}
TEST(DelayTests, AfterAnother)

InParallel: () = {
	TESTPOOL(2);

	task: Task<void>;

	{
		_:ExpectingTimer = (0ms, 5ms);
		task = :() -> Task<void> = {
			t100: = Task<void>::Delay(100ms);
			AWAIT(Task<void>::Delay(200ms));
			AWAIT(t100);
		}();
	}

	_:ExpectingTimer = (200ms, 20ms);
	task.Join();
}
TEST(DelayTests, InParallel)

ContinueInPool: () = {
	TESTPOOL(2);

	task: Task<void>;

	ids: vector<thread::id> = ();

	{
		task = :() -> Task<void> = {
			ids&$*.push_back(this_thread::get_id());
			AWAIT(Task<void>::ContinueInPool());
			ids&$*.push_back(this_thread::get_id());
		}();
	}

	task.Join();

	EXPECT_EQ(2, ids.size());
	EXPECT_NE(ids[0], ids[1]);
}
TEST(DelayTests, ContinueInPool)
