#include "Framework.h"

ExpectingTimer: type = {

	_expected: chrono::milliseconds;
	_epsilon: chrono::milliseconds;

	_start: chrono::system_clock::time_point;

	operator=: (out this, expected: chrono::milliseconds, epsilon: chrono::milliseconds) = {
		_expected = expected;
		_epsilon = epsilon;
		_start = chrono::system_clock::now();
	}
	operator=: (move this) = {
		delta:= chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now() - _start);
		deviation:= delta - _expected;
		EXPECT_LE(deviation, _epsilon);
		EXPECT_GE(deviation, -_epsilon);
	}

}

DelayJoin: () = {
	TESTPOOL(2);

	delayTask:= Task<void>::Delay(100ms);

	_:ExpectingTimer = (100ms, 10ms);
	delayTask.Join();
}
TEST(DelayTests, DelayJoin)
